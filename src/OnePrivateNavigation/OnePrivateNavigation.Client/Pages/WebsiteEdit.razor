@using OnePrivateNavigation.Common.Models
@using OnePrivateNavigation.Common.Models.Website
@using OnePrivateNavigation.Common.Models.Category
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudContainer MaxWidth="MaxWidth.Small">

            <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField Label="名称" @bind-Value="model.Title" For="@(() => model.Title)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField Label="网址" @bind-Value="model.Url" For="@(() => model.Url)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField Label="描述" @bind-Value="model.Description" Lines="3" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudNumericField Label="显示顺序" @bind-Value="model.DisplayOrder" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudSwitch T="bool" @bind-Checked="model.IsVisible" Label="是否显示" Color="Color.Primary" />
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">取消</MudButton>
        <MudButton Color="Color.Primary" OnClick="HandleValidSubmit">保存</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public int? Id { get; set; }
    [Parameter] public int CategoryId { get; set; }

    private WebsiteRequest model = new();
    private List<CategoryResponse>? categories;

    protected override async Task OnInitializedAsync()
    {
        using var Http = new HttpClient();
        var categoriesResponse = await Http.GetFromJsonAsync<ApiResponse<List<CategoryResponse>>>(NavigationManager.BaseUri + "api/Category");
        categories = categoriesResponse?.Data;

        if (Id.HasValue)
        {
            var response = await Http.GetFromJsonAsync<ApiResponse<WebsiteResponse>>(NavigationManager.BaseUri + $"api/Website/{Id}");
            if (response?.Data != null)
            {
                model.Title = response.Data.Title;
                model.Url = response.Data.Url;
                model.Description = response.Data.Description;
                model.DisplayOrder = response.Data.DisplayOrder;
                model.IsVisible = response.Data.IsVisible;
                model.CategoryId = response.Data.CategoryId;
            }
        }
        else
        {
            model.CategoryId = CategoryId;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            using var Http = new HttpClient();
            if (Id.HasValue)
            {
                await Http.PutAsJsonAsync(NavigationManager.BaseUri + $"api/Website/{Id}", model);
            }
            else
            {
                await Http.PostAsJsonAsync(NavigationManager.BaseUri + "api/Website", model);
            }
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception)
        {
            // Handle error
        }
    }

    private void Cancel() => MudDialog.Cancel();
}