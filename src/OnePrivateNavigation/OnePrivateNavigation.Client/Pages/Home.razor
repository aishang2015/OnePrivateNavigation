@page "/"
@rendermode InteractiveAuto
@using System

<PageTitle>导航首页</PageTitle>

<div class="container">
    <!-- 顶部日期时间显示 -->
    <div class="time-display">
        <div class="date">@DateTime.Now.ToString("yyyy年MM月dd日")</div>
        <div class="time">@DateTime.Now.ToString("HH:mm:ss")</div>
    </div>

    <!-- 搜索条 -->
    <div class="search-container">
        <div class="search-box">
            <input type="text" @bind="_searchText" @bind:event="oninput" @onkeydown="HandleKeyDown" placeholder="输入关键词搜索..." />
            <button class="search-button" @onclick="HandleSearch">
                <i class="fas fa-search"></i>
            </button>
        </div>
    </div>

    <!-- 网站导航分组 -->
    <div class="nav-grid">
        @foreach (var group in _navigationGroups)
        {
            <div class="nav-card">
                <div class="nav-card-header">
                    <h2>@group.GroupName</h2>
                </div>
                <div class="nav-card-content">
                    <div class="site-grid">
                        @foreach (var site in group.Sites)
                        {
                            <button class="site-button" @onclick="@(() => NavigateToSite(site.Url))">
                                <i class="@GetIconClass(site.Icon)"></i>
                                <span>@site.Name</span>
                            </button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private string _searchText = "";
    private List<NavigationGroup> _navigationGroups = new List<NavigationGroup>();
    private System.Threading.Timer? _timer;

    protected override void OnInitialized()
    {
        // 初始化导航分组数据
        InitializeNavigationGroups();
        
        // 启动定时器更新时间（每秒更新一次）
        _timer = new System.Threading.Timer(_ =>
        {
            InvokeAsync(StateHasChanged);
        }, null, 0, 1000);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private string GetIconClass(string icon)
    {
        // 将MudBlazor的图标映射到Font Awesome图标
        return icon switch
        {
            Icons.Custom.Brands.Apple => "fab fa-apple",
            Icons.Custom.Brands.Google => "fab fa-google",
            Icons.Custom.Brands.Microsoft => "fab fa-microsoft",
            Icons.Material.Filled.Translate => "fas fa-language",
            Icons.Custom.Brands.Twitter => "fab fa-weibo",
            Icons.Material.Filled.QuestionAnswer => "fas fa-question-circle",
            Icons.Material.Filled.VideoLibrary => "fas fa-play-circle",
            Icons.Material.Filled.Videocam => "fas fa-video",
            Icons.Material.Filled.ShoppingCart => "fas fa-shopping-cart",
            Icons.Material.Filled.ShoppingBag => "fas fa-shopping-bag",
            Icons.Material.Filled.LocalOffer => "fas fa-tags",
            Icons.Material.Filled.Code => "fas fa-code",
            Icons.Custom.Brands.GitHub => "fab fa-github",
            Icons.Material.Filled.Help => "fas fa-question",
            Icons.Material.Filled.Book => "fas fa-book",
            Icons.Material.Filled.Movie => "fas fa-film",
            Icons.Material.Filled.Tv => "fas fa-tv",
            Icons.Material.Filled.Theaters => "fas fa-theater-masks",
            Icons.Material.Filled.MusicNote => "fas fa-music",
            Icons.Material.Filled.Newspaper => "fas fa-newspaper",
            Icons.Material.Filled.Feed => "fas fa-rss",
            Icons.Material.Filled.Article => "fas fa-file-alt",
            Icons.Material.Filled.Public => "fas fa-globe",
            _ => "fas fa-link"
        };
    }

    private void InitializeNavigationGroups()
    {
        // 示例数据，实际应用中可能从API或配置中获取
        _navigationGroups = new List<NavigationGroup>
        {
            new NavigationGroup
            {
                GroupName = "常用工具",
                Sites = new List<SiteInfo>
                {
                    new SiteInfo { Name = "百度", Url = "https://www.baidu.com", Icon = Icons.Custom.Brands.Apple },
                    new SiteInfo { Name = "谷歌", Url = "https://www.google.com", Icon = Icons.Custom.Brands.Google },
                    new SiteInfo { Name = "必应", Url = "https://www.bing.com", Icon = Icons.Custom.Brands.Microsoft },
                    new SiteInfo { Name = "翻译", Url = "https://translate.google.com", Icon = Icons.Material.Filled.Translate }
                }
            },
            new NavigationGroup
            {
                GroupName = "社交媒体",
                Sites = new List<SiteInfo>
                {
                    new SiteInfo { Name = "微博", Url = "https://www.weibo.com", Icon = Icons.Custom.Brands.Twitter },
                    new SiteInfo { Name = "知乎", Url = "https://www.zhihu.com", Icon = Icons.Material.Filled.QuestionAnswer },
                    new SiteInfo { Name = "B站", Url = "https://www.bilibili.com", Icon = Icons.Material.Filled.VideoLibrary },
                    new SiteInfo { Name = "抖音", Url = "https://www.douyin.com", Icon = Icons.Material.Filled.Videocam }
                }
            },
            new NavigationGroup
            {
                GroupName = "购物",
                Sites = new List<SiteInfo>
                {
                    new SiteInfo { Name = "淘宝", Url = "https://www.taobao.com", Icon = Icons.Material.Filled.ShoppingCart },
                    new SiteInfo { Name = "京东", Url = "https://www.jd.com", Icon = Icons.Material.Filled.ShoppingBag },
                    new SiteInfo { Name = "拼多多", Url = "https://www.pinduoduo.com", Icon = Icons.Material.Filled.LocalOffer },
                    new SiteInfo { Name = "亚马逊", Url = "https://www.amazon.cn", Icon = Icons.Custom.Brands.Apple }
                }
            },
            new NavigationGroup
            {
                GroupName = "学习",
                Sites = new List<SiteInfo>
                {
                    new SiteInfo { Name = "CSDN", Url = "https://www.csdn.net", Icon = Icons.Material.Filled.Code },
                    new SiteInfo { Name = "GitHub", Url = "https://github.com", Icon = Icons.Custom.Brands.GitHub },
                    new SiteInfo { Name = "Stack Overflow", Url = "https://stackoverflow.com", Icon = Icons.Material.Filled.Help },
                    new SiteInfo { Name = "掘金", Url = "https://juejin.cn", Icon = Icons.Material.Filled.Book }
                }
            },
            new NavigationGroup
            {
                GroupName = "娱乐",
                Sites = new List<SiteInfo>
                {
                    new SiteInfo { Name = "优酷", Url = "https://www.youku.com", Icon = Icons.Material.Filled.Movie },
                    new SiteInfo { Name = "腾讯视频", Url = "https://v.qq.com", Icon = Icons.Material.Filled.Tv },
                    new SiteInfo { Name = "爱奇艺", Url = "https://www.iqiyi.com", Icon = Icons.Material.Filled.Theaters },
                    new SiteInfo { Name = "网易云音乐", Url = "https://music.163.com", Icon = Icons.Material.Filled.MusicNote }
                }
            },
            new NavigationGroup
            {
                GroupName = "新闻",
                Sites = new List<SiteInfo>
                {
                    new SiteInfo { Name = "新浪", Url = "https://www.sina.com.cn", Icon = Icons.Material.Filled.Newspaper },
                    new SiteInfo { Name = "腾讯", Url = "https://www.qq.com", Icon = Icons.Material.Filled.Feed },
                    new SiteInfo { Name = "网易", Url = "https://www.163.com", Icon = Icons.Material.Filled.Article },
                    new SiteInfo { Name = "凤凰网", Url = "https://www.ifeng.com", Icon = Icons.Material.Filled.Public }
                }
            }
        };
    }

    private void HandleSearch()
    {
        if (!string.IsNullOrWhiteSpace(_searchText))
        {
            // 默认使用百度搜索
            string searchUrl = $"https://www.baidu.com/s?wd={Uri.EscapeDataString(_searchText)}";
            _jsRuntime.InvokeVoidAsync("open", searchUrl, "_blank");
        }
    }

    private void HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            HandleSearch();
        }
    }

    private void NavigateToSite(string url)
    {
        _jsRuntime.InvokeVoidAsync("open", url, "_blank");
    }

    // 导航分组数据模型
    private class NavigationGroup
    {
        public string GroupName { get; set; } = "";
        public List<SiteInfo> Sites { get; set; } = new List<SiteInfo>();
    }

    // 网站信息数据模型
    private class SiteInfo
    {
        public string Name { get; set; } = "";
        public string Url { get; set; } = "";
        public string Icon { get; set; } = Icons.Material.Filled.Link;
    }
}
