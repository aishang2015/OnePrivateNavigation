@page "/management"
@using OnePrivateNavigation.Common.Models
@using OnePrivateNavigation.Common.Models.Category
@using OnePrivateNavigation.Common.Models.Website
@using System.Net.Http.Json
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

@rendermode InteractiveAuto

<div class="container">
    <div class="nav-grid">
        @foreach (var category in categories)
        {
            <div class="nav-card">
                <div class="nav-card-header">
                    <h2>@category.Name</h2>
                    <MudIconButton Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Edit"
                                   OnClick="@(() => OpenCategoryDialog(category.Id))"></MudIconButton>
                    <MudIconButton Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Delete"
                                   OnClick="@(() => DeleteCategory(category.Id))"></MudIconButton>
                </div>
                <div class="nav-card-content">
                    <div class="site-grid">
                        @foreach (var site in websites.Where(s => s.CategoryId == category.Id))
                        {
                            <button class="site-button">
                                <span>@site.Title</span>
                                <MudIconButton Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Edit"
                                               OnClick="@(() => OpenWebsiteDialog(site.Id,category.Id))"></MudIconButton>

                                <MudIconButton Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Delete"
                                               OnClick="@(() => DeleteWebsite(site.Id))"></MudIconButton>
                            </button>
                        }
                        <button class="site-button">
                            <button class="btn btn-sm btn-outline-primary me-2" @onclick="@(() => OpenWebsiteDialog(null,category.Id))">
                                <i class="fas fa-edit"></i> 添加网站
                            </button>
                        </button>
                    </div>
                </div>
            </div>
        }
        <div class="nav-card">
            <div class="nav-card-header">
                <button class="btn btn-sm btn-outline-primary me-2" @onclick="@(() => OpenCategoryDialog(null))">
                    <i class="fas fa-edit"></i> 添加新分组
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<CategoryResponse>? categories = new();
    private List<WebsiteResponse>? websites = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        using var http = new HttpClient();

        var categoriesResponse = await http.GetFromJsonAsync<ApiResponse<List<CategoryResponse>>>(NavigationManager.BaseUri + "api/Category");
        categories = categoriesResponse?.Data;

        var websitesResponse = await http.GetFromJsonAsync<ApiResponse<List<WebsiteResponse>>>(NavigationManager.BaseUri + "api/Website");
        websites = websitesResponse?.Data;
    }

    private async Task OpenCategoryDialog(int? categoryId)
    {
        var parameters = new DialogParameters();
        if (categoryId.HasValue)
        {
            parameters.Add(nameof(CategoryEdit.Id), categoryId.Value);
        }

        var dialog = await DialogService.ShowAsync<CategoryEdit>(categoryId.HasValue ? "编辑分组" : "添加分组", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task OpenWebsiteDialog(int? websiteId, int? categoryId = null)
    {
        var parameters = new DialogParameters();
        if (websiteId.HasValue)
        {
            parameters.Add(nameof(WebsiteEdit.Id), websiteId.Value);
        }
        if (categoryId.HasValue)
        {
            parameters.Add(nameof(WebsiteEdit.CategoryId), categoryId.Value);
        }

        var dialog = await DialogService.ShowAsync<WebsiteEdit>(websiteId.HasValue ? "编辑导航" : "添加导航", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task DeleteCategory(int id)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "确定要删除这个分组吗？"))
            return;

        using var http = new HttpClient();
        await http.DeleteAsync(_navigationManager.BaseUri + $"api/Category/{id}");
        await LoadData();
    }

    private async Task DeleteWebsite(int id)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "确定要删除这个导航吗？"))
            return;

        using var http = new HttpClient();
        await http.DeleteAsync(_navigationManager.BaseUri +  $"api/Website/{id}");
        await LoadData();
    }
}